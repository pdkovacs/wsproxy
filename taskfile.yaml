version: '3'

includes:
  e2e:
    taskfile: ./test/e2e/taskfile.yaml
    dir: ./test/e2e

env:
  TARGETING_MINIKUBE: '{{.TARGETING_MINIKUBE | default "yes"}}'
  IMAGE_REPO: wsproxy

vars:
  APP: wsproxy
  GOOS: linux
  GOARCH: amd64

tasks:
  clean:
    cmds:
      - go clean -testcache
  test-all:
    dotenv: [ ".test-env" ]
    cmds:
      - go test -v -parallel 1 -timeout 600s ./test/...
  test-single:
    dotenv: [ ".test-env" ]
    cmds:
      - go test -v -parallel 1 -timeout 10s ./test/... -run '^TestClusterSupportTestSuite$$' # -testify.m '^TestSendReceiveMessagesFromAppMultiClients$'
      # - go test -v -parallel 1 -timeout 60s ./test/... -run '^TestSendMessageTestSuite$$' -testify.m '^TestSendReceiveMessagesFromAppMultiClients$$'
  buildinfo:
    cmds:
      - echo VERSION=0.0.1 > internal/config/buildinfo.txt
      - printf "TIME=" >> internal/config/buildinfo.txt
      - date +%Y-%m-%dT%H:%M:%S%z >> internal/config/buildinfo.txt
      - printf "COMMIT=" >> internal/config/buildinfo.txt
      - git rev-parse HEAD >> internal/config/buildinfo.txt
  build:
    cmds:
      - task: buildinfo
      - echo "GOOS {{.GOOS}} GOARCH {{.GOARCH}}"
      - env GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -o {{.APP}} cmd/main.go
    sources:
      - cmd/**/*
      - internal/**/*
      - taskfile.yaml
    generates:
      - "{{.APP}}"
  docker:
    cmds:
      - task: build
      - cp {{.APP}} deploy/docker/
      - |
        if [[ "{{.TARGETING_MINIKUBE}}" = "yes" ]];
        then
          echo "Targeting minikube..."
          eval $(minikube -p minikube docker-env)
        fi
        docker build -t wsproxy:latest deploy/docker/
  cluster:
    cmds:
      - task: docker
      - kubectl apply -f deploy/k8s/redis-config.yaml
      - kubectl apply -f deploy/k8s/redis-deployment.yaml
      - kubectl apply -f deploy/k8s/redis-service.yaml
      - kubectl apply -f deploy/k8s/wsproxy-deployment.yaml
      - kubectl apply -f deploy/k8s/wsproxy-service.yaml
